type: update
id: mongodb-replica-set-auto-cluster
name: MongoDB Replica Set
description: Auto-Clustering for MongoDB Replica Set 

permanent: true

targetNodes:
  nodeGroup: ${settings.nodeGroup:nosqldb}
nodeGroupAlias:
  ${settings.nodeGroup}: nosqldb
 
onInstall:
  - if (${settings.clone:false}): 
    - reconfigure
    - resetMongoPasswd
    - cmd[nosqldb]: sudo service mongo-express restart
    - cmd[nosqldb]: jcm recoverBrokenSecondary
      user: root
  - else:
    - configure
    - uploadKey: ${settings.nodeGroup}
    - init
    
onAfterRedeployContainer[nosqldb]:
  - cmd[nosqldb]: jcm restartAdminApp

onAfterScaleOut[nosqldb]: 
  - uploadKey: ${event.response.nodes.join(id,)}
  - forEach(event.response.nodes):
    - add: ${@i.id}
  - setAdminAppPswd: ${event.response.nodes.join(id,)}
  - cmd [${event.response.nodes.join(id,)}]: jcm restartAdminApp

onBeforeResetServicePassword[nosqldb]:
  - resetMongoPasswd
  - stopEvent:
      type: success
      message: MongoDB cluster password changed successfully. Credentilas are sent in the e-mail.

onBeforeResetNodePassword[nosqldb]:
  - resetMongoPasswd
  - stopEvent:
      type: success
      message: MongoDB cluster password changed successfully. Credentilas are sent in the e-mail.

onBeforeScaleIn[nosqldb]: 
  - forEach(event.response.nodes):
    - stepDown: ${@i.id}
    - cmd[${@i.id}]: sleep 10; jem service stop;
    - remove: ${@i.id}

onAfterMigrate:
  - reconfigure
  
onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}    
    settings: 
      nodeGroup: ${settings.nodeGroup}      
      clone: true 

actions:
  configure:
    - env.control.AddContainerEnvVars[nosqldb]:
        vars: {"KEY_PASS":"${fn.password}"}
    - resetMongoPasswd
    
  uploadKey:
    - cmd[${nodes.nosqldb.master.id}]: jcm getKey
    - cmd[${this}]: |-
        jcm uploadKey '${response.out}'
        jcm adjustConf
      user: root

  setAdminAppPswd: 
    - cmd[${nodes.nosqldb.master.id}]: jcm getAdminAppPswd
    - cmd[${this}]: jcm setAdminAppPswd '${response.out}' true

  init: 
    - sleep: 3000
    - cmd[${nodes.nosqldb.master.id}]: jcm initCluster ${nodes.nosqldb.join(id,)}
    - setAdminAppPswd: ${nodes.nosqldb.join(id,)}
    - cmd[nosqldb]: jcm restartAdminApp || true

  add:
    - cmd[${nodes.nosqldb.master.id}]: jcm addMember ${this}
    - if (response.out.indexOf("COMPLETED") == -1):     
        cmd[${response.out}]: jcm addMember ${this}

  remove:
    - cmd[${nodes.nosqldb.master.id}]: jcm removeMember ${this}
    - if (response.out.indexOf("COMPLETED") == -1):     
        cmd[${response.out}]: jcm removeMember ${this}

  stepDown:
    cmd[${this}]: jcm stepDown
    sync: true 

  reconfigure: 
    cmd[nosqldb]: jcm afterClone ${nodes.nosqldb.join(id,)}
  
  resetMongoPasswd:
    - if (/^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/.test("${nodes.nosqldb[0].extips}")): 
      - setGlobals:
          protoName: "http"
    - else:
      - setGlobals:
          protoName: "https"
    - script: |-
        var resp = jelastic.env.control.GetEnvInfo('${env.name}', session);
        if (resp.result != 0) return resp;
        var currentEnvDomain = resp.env.domain;
        resp = api.env.control.ExecCmdById('${env.name}', session, '${nodes.nosqldb.master.id}', toJSON([{ "command": "printf '%s' $(echo $RANDOM | md5sum) | cut -c 1-10", "params":""}]), true);
        if (resp.result != 0) return resp;
        var passwd = resp.responses[0].out;
        var opensslVersionCommand = "openssl version | awk '{print $2}' | awk -F . '{print $1}'";
        resp = api.env.control.ExecCmdById('${env.name}', session, '${nodes.nosqldb.master.id}', toJSON([{ "command": opensslVersionCommand, "params":""}]), true);
        if (resp.result != 0) return resp;
        var opensslVersion = resp.responses[0].out;
        if  ( opensslVersion >= 3 ) {
            var openssl_parameters = "-aes-256-cbc -pbkdf2 -md sha512 -iter 10000 -salt -S 429488b2f3870b4a -iv dcb9fe5ecb4011cd20114119930aadc3";
            var static = "static:";
        } else {
            var openssl_parameters = "-aes-128-cbc -nosalt -A -nosalt";
            var static = "static";
        }
        var encCmdCommand = "echo " + passwd + " | openssl enc -e -a " + openssl_parameters + ' -pass "pass:TFVhBKDOSBspeSXesw8fElCcOzbJzYed"';
        resp = api.env.control.ExecCmdById('${env.name}', session, '${nodes.nosqldb.master.id}', toJSON([{ "command": encCmdCommand, "params":""}]), true);
        if (resp.result != 0) return resp;
        var encPasswd = resp.responses[0].out;
        resp = api.env.control.ExecCmdByGroup('${env.name}', session, '${settings.nodeGroup}', toJSON([{ "command": "jem passwd set -p " + static + ":" + encPasswd, "params": ""}]), false, false, "root");
        if (resp.result != 0) return resp;
        var title = "MongoDB cluster (Replica Set) password was successfully set for ${env.name}"
            text = "<p>MongoDB cluster (Replica Set) password was successfully set for your ${env.name} environment.</p><p><strong>Admin panel</strong>:&nbsp;${globals.protoName}://" + "node${nodes.nosqldb.master.id}-" + currentEnvDomain + "/</p><p><strong>User </strong>admin</p><p><strong>Password</strong>:&nbsp;" + passwd + "</p>"
        return api.message.email.Send(appid, signature, null, '${user.email}', '${user.email}', title, text);
    - setAdminAppPswd: ${nodes.nosqldb.join(id,)}
    - cmd[nosqldb]: jcm restartAdminApp
  
success:
  email: false
  text: |
    **Admin Panel**: [${nodes.nosqldb.master.url}](${nodes.nosqldb.master.url})
    Credentilas are sent in the e-mail.
  
    * [Connection to MongoDB](https://docs.jelastic.com/connection-to-mongodb)
    * [MongoDB Replication Overview](https://docs.mongodb.com/manual/replication/)
